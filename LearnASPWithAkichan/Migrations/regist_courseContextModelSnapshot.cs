// <auto-generated />
using System;
using LearnASPWithAkichan.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnASPWithAkichan.Migrations
{
    [DbContext(typeof(regist_courseContext))]
    partial class regist_courseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LearnASPWithAkichan.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("passWord");

                    b.Property<bool>("Role")
                        .HasColumnType("bit")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "UQ__account__7C9273C407D22EDA")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.ClassSession", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date")
                        .HasColumnName("begin_date");

                    b.Property<bool>("CommonClass")
                        .HasColumnType("bit")
                        .HasColumnName("common_class");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("department_id")
                        .IsFixedLength();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<double?>("PointClass")
                        .HasColumnType("float")
                        .HasColumnName("point_class");

                    b.Property<double?>("PointEnd")
                        .HasColumnType("float")
                        .HasColumnName("point_end");

                    b.Property<double?>("PointMid")
                        .HasColumnType("float")
                        .HasColumnName("point_mid");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("subject_id")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("class_session", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ__departme__72E12F1BB1B2FDEF")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__departme__B43B145FE3EA6A38")
                        .IsUnique();

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.RegistClass", b =>
                {
                    b.Property<string>("ClassSessionId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("class_session_id")
                        .IsFixedLength();

                    b.Property<string>("StudentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.Property<int?>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<DateTime>("RegistDate")
                        .HasColumnType("datetime")
                        .HasColumnName("regist_date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ClassSessionId", "StudentId")
                        .HasName("PK__regist_c__249FCF5C89324CF5");

                    b.HasIndex("StudentId");

                    b.ToTable("regist_class", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("date")
                        .HasColumnName("birth");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("department_id")
                        .IsFixedLength();

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("home_town");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<int?>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("department_id")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("PrerequisiteSubject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("subject_id")
                        .IsFixedLength();

                    b.Property<string>("PrerequisiteSubjectId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("prerequisite_subject_id")
                        .IsFixedLength();

                    b.HasKey("SubjectId", "PrerequisiteSubjectId")
                        .HasName("PK__prerequi__5E9C16D777E628E1");

                    b.HasIndex("PrerequisiteSubjectId");

                    b.ToTable("prerequisite_subject", (string)null);
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.ClassSession", b =>
                {
                    b.HasOne("LearnASPWithAkichan.Models.Department", "Department")
                        .WithMany("ClassSessions")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__class_ses__depar__31EC6D26");

                    b.HasOne("LearnASPWithAkichan.Models.Subject", "Subject")
                        .WithMany("ClassSessions")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK__class_ses__subje__32E0915F");

                    b.Navigation("Department");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.RegistClass", b =>
                {
                    b.HasOne("LearnASPWithAkichan.Models.ClassSession", "ClassSession")
                        .WithMany("RegistClasses")
                        .HasForeignKey("ClassSessionId")
                        .IsRequired()
                        .HasConstraintName("FK__regist_cl__class__3A81B327");

                    b.HasOne("LearnASPWithAkichan.Models.Student", "Student")
                        .WithMany("RegistClasses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__regist_cl__stude__398D8EEE");

                    b.Navigation("ClassSession");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Student", b =>
                {
                    b.HasOne("LearnASPWithAkichan.Models.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__student__account__36B12243");

                    b.HasOne("LearnASPWithAkichan.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__student__departm__35BCFE0A");

                    b.Navigation("Account");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Subject", b =>
                {
                    b.HasOne("LearnASPWithAkichan.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__subject__departm__2B3F6F97");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("PrerequisiteSubject", b =>
                {
                    b.HasOne("LearnASPWithAkichan.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteSubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__prerequis__prere__2F10007B");

                    b.HasOne("LearnASPWithAkichan.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__prerequis__subje__2E1BDC42");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Account", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.ClassSession", b =>
                {
                    b.Navigation("RegistClasses");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Department", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Student", b =>
                {
                    b.Navigation("RegistClasses");
                });

            modelBuilder.Entity("LearnASPWithAkichan.Models.Subject", b =>
                {
                    b.Navigation("ClassSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
